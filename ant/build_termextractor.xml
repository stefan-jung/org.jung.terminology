<?xml version="1.0" encoding="UTF-8"?>
<!--
    This is the build script of the termextractor.
    It is meant to be called by an Oxygen transformation scenario.
    It takes a series of properties as input, like a directory with either XLIFF or TBX
    files to extract terms from, the expected output format, and so forth.
-->
<project default="termextractor" xmlns:if="ant:if" xmlns:unless="ant:unless" basedir=".">
    
    <!-- Properties -->
    <property name="debugging.mode" value="true"/>
    
    <!-- Includes -->
    <include file="build_antcontrib.xml"/>
    <include file="build_graalvm.xml"/>
    <include file="build_saxon.xml"/>
    
    <!-- Imports -->
    <import file="build_substring-before.xml"/>
    <import file="build_temp-dir.xml"/>
    
    <!-- Create the output directory if it doesn't exist -->
    <target name="-prepare">
        <fail message="The required property &quot;search.string&quot; is not set.">
            <condition>
                <not>
                    <isset property="search.string"/>
                </not>
            </condition>
        </fail>
        <fail message="The required property &quot;xliff-tbx.directory&quot; is not set.">
            <condition>
                <not>
                    <isset property="xliff-tbx.directory"/>
                </not>
            </condition>
        </fail>
        <fail message="The required property &quot;output.type&quot; is not set.">
            <condition>
                <not>
                    <isset property="output.type"/>
                </not>
            </condition>
        </fail>
        <echo>debugging.mode = "${debugging.mode}"</echo>
    </target>
    
    <!-- Transform .xlf files using the XSLT file -->
    <target name="termextractor" depends="-prepare, -temp.dir">
        <echo>xliff-tbx.directory = ${xliff-tbx.directory}</echo>
        <pathconvert property="xliff-tbx.directory.absolute.path">
            <path path="${xliff-tbx.directory}"/>
            <mapper type="glob" from="*" to="*"/>
        </pathconvert>
        <echo>xliff-tbx.directory.absolute.path = ${xliff-tbx.directory.absolute.path}</echo>
        
        <basename file="${xliff-tbx.directory}" property="xliff-tbx.basename"/>
        <echo>xliff-tbx.basename = "${xliff-tbx.basename}"</echo>
        <makeurl file="${xliff-tbx.directory.absolute.path}" property="xliff-tbx.url" validate="true"/>
        <echo>xliff-tbx.url = "${xliff-tbx.url}"</echo>
        <substring-before input="${xliff-tbx.url}" string="${xliff-tbx.basename}" property="xliff-tbx.url.no-file"/>
        <echo>xliff-tbx.url.no-file = "${xliff-tbx.url.no-file}"</echo>
        <makeurl file="../xsl/termextractor/dummy.xml" property="dummy.file.url"/>
        <property name="output.file" value="${jung.terminology.temp.dir}${file.separator}termextractor.txt"/>
        <delete file="${output.file}" failonerror="false"/>
        <delete file="${output.file}.temp" failonerror="false"/>
        
        <condition property="isTXT">
            <equals arg1="${output.type}" arg2="txt"/>
        </condition>
        <condition property="isCSV">
            <equals arg1="${output.type}" arg2="csv"/>
        </condition>
        <condition property="isTermentry">
            <equals arg1="${output.type}" arg2="termentry"/>
        </condition>
        <condition property="isAll">
            <equals arg1="${output.type}" arg2="all"/>
        </condition>
        
        <for if:set="isTXT" list="${search.string}" delimiter="," param="term" trim="true">
            <sequential>
                <antcall target="-extract-txt">
                    <param name="term" value="@{term}"/>
                </antcall>
            </sequential>
        </for>
        <for if:set="isCSV" list="${search.string}" delimiter="," param="term" trim="true">
            <sequential>
                <antcall target="-extract-csv">
                    <param name="term" value="@{term}"/>
                </antcall>
            </sequential>
        </for>
        <for if:set="isTermentry" list="${search.string}" delimiter="," param="term" trim="true">
            <sequential>
                <antcall target="-extract-termentry">
                    <param name="term" value="@{term}"/>
                </antcall>
            </sequential>
        </for>
        <for if:set="isAll" list="${search.string}" delimiter="," param="term" trim="true">
            <sequential>
                <antcall target="-extract-txt">
                    <param name="term" value="@{term}"/>
                </antcall>
                <antcall target="-extract-csv">
                    <param name="term" value="@{term}"/>
                </antcall>
                <antcall target="-extract-termentry">
                    <param name="term" value="@{term}"/>
                </antcall>
            </sequential>
        </for>
    </target>
    
    <target name="-extract-txt">
        <echo>Extracting term "${term}" as text</echo>
        <propertyregex input="${xliff-tbx.url}" regexp="file:\/" replace="" property="xliff-tbx.directory.no.protocol"/>
        <echo>output = "${jung.terminology.temp.dir}${file.separator}dummy.xml"</echo>
        <xslt 
            style="../xsl/termextractor/termextractor-txt.xsl"
            in="${xliff-tbx.directory.no.protocol}"
            out="${output.file}.temp"
            failonerror="true"
            failontransformationerror="true">
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <classpath refid="saxon"/>
            <param name="search-string" expression="${term}"/>
            <param name="xliff-directory" expression="${xliff-tbx.url.no-file}"/>
            <param name="source.language" expression="${source.language}"/>
            <param name="debugging.mode" expression="${debugging.mode}"/>
            <param name="output.type" expression="${output.type}"/>
        </xslt>
        <condition property="output.file.available">
            <available file="${output.file}"/>
        </condition>
        <move unless:set="output.file.available" file="${output.file}.temp" tofile="${output.file}" verbose="true"/>
        <loadfile if:set="output.file.available" srcfile="${output.file}.temp" property="file"/>
        <echo if:set="output.file.available" file="${output.file}" message="${file}" append="true"/>
        <delete file="${output.file}.temp"/>
    </target>

    <target name="-extract-csv">
        <echo>Extracting term "${term}" as CSV</echo>
        <propertyregex input="${xliff-tbx.url}" regexp="file:\/" replace="" property="xliff-tbx.directory.no.protocol"/>
        <echo>output = "${jung.terminology.temp.dir}${file.separator}dummy.xml"</echo>
        <xslt 
            style="../xsl/termextractor/termextractor-csv.xsl"
            in="${xliff-tbx.directory.no.protocol}"
            out="${output.file}.temp"
            failonerror="true"
            failontransformationerror="true">
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <classpath refid="saxon"/>
            <param name="search-string" expression="${term}"/>
            <param name="xliff-directory" expression="${xliff-tbx.url.no-file}"/>
            <param name="source.language" expression="${source.language}"/>
            <param name="debugging.mode" expression="${debugging.mode}"/>
            <param name="output.type" expression="${output.type}"/>
        </xslt>
        <condition property="output.file.available">
            <available file="${output.file}"/>
        </condition>
        <move unless:set="output.file.available" file="${output.file}.temp" tofile="${output.file}" verbose="true"/>
        <loadfile if:set="output.file.available" srcfile="${output.file}.temp" property="file"/>
        <echo if:set="output.file.available" file="${output.file}" message="${file}" append="true"/>
        <delete file="${output.file}.temp"/>
    </target>

    <target name="-extract-termentry">
        <echo>Extracting term "${term}" as termentry topic</echo>
        <propertyregex input="${xliff-tbx.url}" regexp="file:\/" replace="" property="xliff-tbx.directory.no.protocol"/>
        <echo>output = "${jung.terminology.temp.dir}${file.separator}dummy.xml"</echo>
        <xslt 
            style="../xsl/termextractor/termextractor-termentry.xsl"
            in="${xliff-tbx.directory.no.protocol}"
            out="${output.file}.temp"
            failonerror="true"
            failontransformationerror="true">
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <classpath refid="saxon"/>
            <param name="search-string" expression="${term}"/>
            <param name="directory" expression="${xliff-tbx.url.no-file}"/>
            <param name="source.language" expression="${source.language}"/>
            <param name="debugging.mode" expression="${debugging.mode}"/>
            <param name="output.type" expression="${output.type}"/>
            <param name="output.directory" expression="${jung.terminology.temp.dir}"/>
        </xslt>
        <condition property="output.file.available">
            <available file="${output.file}"/>
        </condition>
        <move unless:set="output.file.available" file="${output.file}.temp" tofile="${output.file}" verbose="true"/>
        <loadfile if:set="output.file.available" srcfile="${output.file}.temp" property="file"/>
        <echo if:set="output.file.available" file="${output.file}" message="${file}" append="true"/>
        <delete file="${output.file}.temp"/>
    </target>
  
</project>