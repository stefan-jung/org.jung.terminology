<?xml version="1.0" encoding="UTF-8"?>
<!--
    This is the build script of the term harvester.
    It is meant to be called by an Oxygen transformation scenario.
    It takes a series of properties as input, like a directory with either XLIFF or TMX
    files to extract terms from, the expected output format, and so forth.
    
    This script iterates over the comma-separated list of terms to extract.
    It does intentionally not iterate over the TMX/XLIFF files.
    This is done in XSLT with a collection().
-->
<project default="termharvester" xmlns:if="ant:if" xmlns:unless="ant:unless" basedir=".">
    
    
    
    <!-- Properties -->
    <property environment="env"/>
    <property name="debugging.mode" value="true"/>
    
    <!-- Includes -->
    <include file="build_antcontrib.xml"/>
    <include file="build_graalvm.xml"/>
    <include file="build_groovy.xml"/>
    <include file="build_saxon.xml"/>
    
    <!-- Imports -->
    <import file="build_substring-before.xml"/>
    <import file="build_desktop-dir.xml"/>
    <import file="build_temp-dir.xml"/>
    
    <!-- Create the output directory if it doesn't exist -->
    <target name="-prepare">
        <fail message="The required property &quot;search.string&quot; is not set.">
            <condition>
                <not>
                    <isset property="search.string"/>
                </not>
            </condition>
        </fail>
        <fail message="The required property &quot;output.type&quot; is not set.">
            <condition>
                <not>
                    <isset property="output.type"/>
                </not>
            </condition>
        </fail>
        <echo>debugging.mode = "${debugging.mode}"</echo>
    </target>
    
    <target name="termharvester" depends="-prepare, -temp.dir, -desktop.dir">
        
        <property name="tmx.xliff.dir" value="${desktop.dir}${file.separator}termharvester"/>
        <makeurl file="${tmx.xliff.dir}" property="tmx.xliff.dir.url"/>
        <mkdir dir="${tmx.xliff.dir}"/>

        <!-- To make this work, we need -Djava.awt.headless=false as JVM argument. -->
        <groovy>
            import javax.swing.JOptionPane;
            def tmxXliffDir = project.getProperty("tmx.xliff.dir");
            def title = "Term Harvester";
            def message = "The Term Harvester is looking for XLIFF (.xlf, .xliff) and TMX (.tmx) files in the directory:\n\n" + tmxXliffDir;
            JOptionPane.showMessageDialog(null, message, title, JOptionPane.INFORMATION_MESSAGE);
        </groovy>
        
        <echo>tmx.xliff.dir = ${tmx.xliff.dir}</echo>
        <pathconvert property="tmx.xliff.dir.absolute.path">
            <path path="${tmx.xliff.dir}"/>
            <mapper type="glob" from="*" to="*"/>
        </pathconvert>
        <echo>tmx.xliff.dir.absolute.path = ${tmx.xliff.dir.absolute.path}</echo>
        
        <resourcecount property="xlf.count">
            <fileset dir="${tmx.xliff.dir}">
                <include name="*.xlf"/>
                <include name="*.xliff"/>
            </fileset>
        </resourcecount>
        <echo>Found "${xlf.count}" XLIFF (.xlf, .xliff) file(s) in directory "${tmx.xliff.dir}"</echo>
        
        <resourcecount property="tmx.count">
            <fileset dir="${tmx.xliff.dir}">
                <include name="*.tmx"/>
            </fileset>
        </resourcecount>
        <echo>Found "${tmx.count}" TMX (.tmx) file(s) in directory "${tmx.xliff.dir}"</echo>
        
        <fail message="Did not find TMX or XLIFF files in ${tmx.xliff.dir}">
            <condition>
                <and>
                    <equals arg1="${tmx.count}" arg2="0"/>
                    <equals arg1="${xlf.count}" arg2="0"/>
                </and>
            </condition>
        </fail>
        
        
        <!--<basename file="${tmx.xliff.dir}" property="xliff-tmx.basename"/>-->
        <!--<echo>xliff-tmx.basename = "${xliff-tmx.basename}"</echo>-->
        <makeurl file="${tmx.xliff.dir.absolute.path}" property="xliff-tmx.url" validate="true"/>
        <echo>xliff-tmx.url = "${xliff-tmx.url}"</echo>
        <!--<substring-before input="${xliff-tmx.url}" string="${xliff-tmx.basename}" property="xliff-tmx.url.no-file"/>-->
        <!--<echo>xliff-tmx.url.no-file = "${xliff-tmx.url.no-file}"</echo>-->
        <!--<makeurl file="../xsl/termharvester/dummy.xml" property="dummy.file.url"/>-->
        <property name="output.file" value="${jung.terminology.temp.dir}${file.separator}termharvester.txt"/>
        <delete file="${output.file}" failonerror="false"/>
        <delete file="${output.file}.temp" failonerror="false"/>
        
        <condition property="isTXT">
            <equals arg1="${output.type}" arg2="txt"/>
        </condition>
        <condition property="isCSV">
            <equals arg1="${output.type}" arg2="csv"/>
        </condition>
        <condition property="isTermentry">
            <equals arg1="${output.type}" arg2="termentry"/>
        </condition>
        <condition property="isAll">
            <equals arg1="${output.type}" arg2="all"/>
        </condition>
        
        <for if:set="isTXT" list="${search.string}" delimiter="," param="term" trim="true">
            <sequential>
                <antcall target="-extract-txt">
                    <param name="term" value="@{term}"/>
                </antcall>
            </sequential>
        </for>
        <for if:set="isCSV" list="${search.string}" delimiter="," param="term" trim="true">
            <sequential>
                <antcall target="-extract-csv">
                    <param name="term" value="@{term}"/>
                </antcall>
            </sequential>
        </for>
        <for if:set="isTermentry" list="${search.string}" delimiter="," param="term" trim="true">
            <sequential>
                <antcall target="-extract-termentry">
                    <param name="term" value="@{term}"/>
                </antcall>
            </sequential>
        </for>
        <for if:set="isAll" list="${search.string}" delimiter="," param="term" trim="true">
            <sequential>
                <antcall target="-extract-txt">
                    <param name="term" value="@{term}"/>
                </antcall>
                <antcall target="-extract-csv">
                    <param name="term" value="@{term}"/>
                </antcall>
                <antcall target="-extract-termentry">
                    <param name="term" value="@{term}"/>
                </antcall>
            </sequential>
        </for>
    </target>
    
    <target name="-extract-txt">
        <echo>Extracting term "${term}" as text</echo>
        <echo file="${tmx.xliff.dir}${file.separator}dummy-input.xml" append="false" force="true">&lt;dummy/></echo>
        <xslt 
            style="../xsl/termharvester/termharvester-txt.xsl"
            in="${tmx.xliff.dir}${file.separator}dummy-input.xml"
            out="${tmx.xliff.dir}${file.separator}${term}.txt"
            failonerror="true"
            failontransformationerror="true">
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <classpath refid="saxon"/>
            <param name="term" expression="${term}"/>
            <!--<param name="xliff-directory" expression="${xliff-tmx.url.no-file}"/>-->
            <param name="tmx.xliff.dir" expression="${tmx.xliff.dir}"/>
            <param name="source.language" expression="${source.language}"/>
            <param name="debugging.mode" expression="${debugging.mode}"/>
            <param name="output.type" expression="${output.type}"/>
        </xslt>
        <delete file="${tmx.xliff.dir}${file.separator}dummy-input.xml" failonerror="false" quiet="true" verbose="false"/>
    </target>

    <target name="-extract-csv">
        <echo>Extracting term "${term}" as CSV</echo>
        <!--<propertyregex input="${xliff-tmx.url}" regexp="file:\/" replace="" property="tmx.xliff.dir.no.protocol"/>
        <echo>output = "${jung.terminology.temp.dir}${file.separator}dummy.xml"</echo>-->
        <echo file="${tmx.xliff.dir}${file.separator}dummy-input.xml" append="false" force="true">&lt;dummy/></echo>
        <xslt 
            style="../xsl/termharvester/termharvester-csv.xsl"
            in="${tmx.xliff.dir}${file.separator}dummy-input.xml"
            out="${tmx.xliff.dir}${file.separator}${term}.csv"
            failonerror="true"
            failontransformationerror="true">
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <classpath refid="saxon"/>
            <param name="term" expression="${term}"/>
            <param name="tmx.xliff.dir" expression="${tmx.xliff.dir}"/>
            <!--<param name="xliff-directory" expression="${xliff-tmx.url.no-file}"/>-->
            <param name="source.language" expression="${source.language}"/>
            <param name="debugging.mode" expression="${debugging.mode}"/>
            <param name="output.type" expression="${output.type}"/>
        </xslt>
        <condition property="output.file.available">
            <available file="${output.file}"/>
        </condition>
        <move unless:set="output.file.available" file="${output.file}.temp" tofile="${output.file}" verbose="true"/>
        <loadfile if:set="output.file.available" srcfile="${output.file}.temp" property="file"/>
        <echo if:set="output.file.available" file="${output.file}" message="${file}" append="true"/>
        <delete file="${output.file}.temp"/>
    </target>

    <target name="-extract-termentry">
        <echo>Extracting term "${term}" as termentry topic</echo>
        <propertyregex input="${xliff-tmx.url}" regexp="file:\/" replace="" property="tmx.xliff.dir.no.protocol"/>
        <echo>output = "${jung.terminology.temp.dir}${file.separator}dummy.xml"</echo>
        <xslt 
            style="../xsl/termharvester/termharvester-termentry.xsl"
            in="${tmx.xliff.dir.no.protocol}"
            out="${output.file}.temp"
            failonerror="true"
            failontransformationerror="true">
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <classpath refid="saxon"/>
            <param name="term" expression="${term}"/>
            <param name="directory" expression="${xliff-tmx.url.no-file}"/>
            <param name="source.language" expression="${source.language}"/>
            <param name="debugging.mode" expression="${debugging.mode}"/>
            <param name="output.type" expression="${output.type}"/>
            <param name="output.directory" expression="${jung.terminology.temp.dir}"/>
        </xslt>
        <condition property="output.file.available">
            <available file="${output.file}"/>
        </condition>
        <move unless:set="output.file.available" file="${output.file}.temp" tofile="${output.file}" verbose="true"/>
        <loadfile if:set="output.file.available" srcfile="${output.file}.temp" property="file"/>
        <echo if:set="output.file.available" file="${output.file}" message="${file}" append="true"/>
        <delete file="${output.file}.temp"/>
    </target>
  
</project>