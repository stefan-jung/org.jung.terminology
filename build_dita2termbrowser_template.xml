<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:dita="http://dita-ot.sourceforge.net" xmlns:if="ant:if" xmlns:unless="ant:unless">
    
    <target name="-is-oxygen-webhelp-available">
        <fail message="The plugin com.oxygen.webhelp is not available">
            <condition>
                <or>
                    <not>
                        <isset property="dita.plugin.com.oxygenxml.webhelp.responsive.dir"/>
                    </not>
                    <not>
                        <isset property="dita.plugin.com.oxygenxml.webhelp.classic.dir"/>
                    </not>
                </or>
            </condition>
        </fail>
    </target>
    
    <!-- 
        WORKAROUND: It is mandatory to call init-properties here.
        Otherwise, the dita.temp.dir property would not be available
        in the termbrowser-termstats and semanticnet target
        on some Linux OSes when using DITA-OT 2.4.3+
    -->
    
    <target name="dita2termbrowser-responsive"
        depends="-is-oxygen-webhelp-available,
                 init-properties,
                 dita2webhelp-responsive,
                 -generate-termstats,
                 -generate-semanticnet">
    </target>
    
    <target name="-is-xmltask-available">
        <pathconvert refid="dost.class.path" property="dost.class.path.property"/>
        <condition property="xmltask-available" value="true">
            <contains string="${dost.class.path.property}" substring="xmltask"/>
        </condition>
        <fail unless="xmltask-available">xmltask.jar is not found on classpath</fail>
    </target>
    
    <target name="-generate-termstats">
        <description>
            Helper target to determine if terminology statistics should be generated.
            This target is looking for a &lt;termstatsref&gt; element on the terminology map.
        </description>

        <property if:set="args.term.containermap" name="termmap" value="${args.term.containermap}"/>
        <property unless:set="args.term.containermap" name="termmap" value="${args.input}"/>
        <!-- <echo level="info">termmap=${termmap}</echo> -->        
        <basename property="basename" file="${args.input}" suffix=".ditamap"/>
        <basename property="termmap.basename" file="${termmap}" suffix=".ditamap"/>
        <loadfile property="termstatsref" srcfile="${dita.temp.dir}${file.separator}${termmap.basename}.ditamap">
            <filterchain>       
                <linecontainsregexp>          
                    <regexp pattern="termmap/termstatsref "/>        
                </linecontainsregexp>      
            </filterchain> 
        </loadfile>
        <property if:set="termstatsref" name="generate-termstats" value="true"/>
        <echo if:set="generate-termstats" level="info">Generate terminology statistics: true</echo>
        <echo unless:set="generate-termstats" level="info">Generate terminology statistics: false</echo>
        <antcall if:set="generate-termstats" target="termbrowser-termstats"/>
    </target>
   
    <target name="-generate-semanticnet">
        <description>
            Helper target to determine if a semantic net should be generated.
            This target is looking for a &lt;semanticnetref&gt; element on the terminology map.
        </description>
        
        <property if:set="args.term.containermap" name="termmap" value="${args.term.containermap}"/>
        <property unless:set="args.term.containermap" name="termmap" value="${args.input}"/>
        <!-- <echo level="info">termmap=${termmap}</echo> -->        
        <basename property="basename" file="${args.input}" suffix=".ditamap"/>
        <basename property="termmap.basename" file="${termmap}" suffix=".ditamap"/>
        <loadfile property="semanticnetref" srcfile="${dita.temp.dir}${file.separator}${termmap.basename}.ditamap">
            <filterchain>       
                <linecontainsregexp>          
                    <regexp pattern="termmap/semanticnetref "/>        
                </linecontainsregexp>      
            </filterchain> 
        </loadfile>
        <property if:set="semanticnetref" name="generate-semanticnet" value="true"/>
        <echo if:set="generate-semanticnet" level="info">Generate semantic net: true</echo>
        <echo unless:set="generate-semanticnet" level="info">Generate semantic net: false</echo>
        <antcall if:set="generate-semanticnet" target="semanticnet"/>
    </target>
    
    <target name="termbrowser-termstats"
        description="Generate terminology statistics."
        depends="-is-xmltask-available"
        if:set="generate-termstats">
        
        <property if:set="args.term.containermap" name="termmap" value="${args.term.containermap}"/>
        <property unless:set="args.term.containermap" name="termmap" value="${args.input}"/>
        
        <echo level="info">termmap=${termmap}</echo>
        
        <basename property="basename" file="${args.input}" suffix=".ditamap"/>
        <basename property="termmap.basename" file="${termmap}" suffix=".ditamap"/>
        
        <property name="dita.temp.dir.abs" location="${dita.temp.dir}"/>
        <makeurl file="${dita.temp.dir.abs}" property="dita.temp.dir.abs.url"/>
        <property name="dita.map.rel" value="${dita.temp.dir}${file.separator}${termmap.basename}.ditamap" relative="no"/>
        
        <!--<loadfile property="termstatsref" srcfile="${dita.temp.dir}${file.separator}${termmap.basename}.ditamap">
            <filterchain>       
                <linecontainsregexp>          
                    <regexp pattern="termmap/termstatsref "/>        
                </linecontainsregexp>      
            </filterchain> 
        </loadfile>
        <property if:set="termstatsref" name="generate-termstats" value="true"/>
        <echo if:set="generate-termstats">Generate terminology statistics, because &lt;termstatsref&gt; found on terminology map</echo>-->
        
        <!-- Convert terminology statistics to termstats XML -->
        <xslt basedir="${dita.temp.dir}"
            destdir="${output.dir}"
            in="${dita.temp.dir}${file.separator}${termmap.basename}.ditamap"
            out="${dita.temp.dir}${file.separator}terminology_stats.xml"
            reloadstylesheet="${dita.xhtml.reloadstylesheet}"
            classpathref="dost.class.path"
            extension="_check.xml"
            style="${dita.plugin.org.doctales.terminology.dir}/xsl/terminology-stats.xsl"
            filenameparameter="FILENAME" 
            filedirparameter="FILEDIR">
            <param name="ditamap" expression="${dita.map.rel}"/>
            <param name="ditamap.filename" expression="${basename}.ditamap"/>
            <param name="temp.dir" expression="${dita.temp.dir}"/>
            <param name="temp.dir.abs" expression="${dita.temp.dir.abs.url}"/>
            <xmlcatalog refid="dita.catalog"/>
        </xslt>
        
        <!--<antcall target="termstats-merge"/>-->
        
        
        <!-- termstats-merge-previous-statics -->
        <echo if:set="args.termstats">Property args.termstats is set</echo>
        <echo unless:set="args.termstats">Property args.termstats is not set</echo>
        <echo if:set="args.termstats" level="info">
            Merge termstats files: '${args.termstats}' and '${dita.temp.dir}${file.separator}terminology_stats.xml'
        </echo>
        
        <makeurl if:set="args.termstats" file="${args.termstats}" property="old.termstats.url"/>
        <makeurl if:set="args.termstats" file="${dita.temp.dir}${file.separator}terminology_stats.xml" property="new.termstats.url"/>
        
        <xslt if:set="args.termstats"
            basedir="${dita.temp.dir}"
            destdir="${dita.temp.dir}"
            in="${args.termstats}"
            out="${dita.temp.dir}/termstats_merged.xml"
            style="${dita.plugin.org.doctales.terminology.dir}/xsl/terminology-stats-merge-xml.xsl">
            <!--<param name="old.termstats" expression="${args.termstats}"/>
            <param name="new.termstats" expression="${dita.temp.dir}${file.separator}terminology_stats.xml"/>-->
            <param name="old.termstats" expression="${old.termstats.url}"/>
            <param name="new.termstats" expression="${new.termstats.url}"/>
        </xslt>

        <!-- Merge step done -->

        <!-- termstats-move-new -->
        <!--<echo  level="info">No previous termstats file found</echo>-->
        <move unless:set="args.termstats"
            file="${dita.temp.dir}${file.separator}terminology_stats.xml"
            tofile="${dita.temp.dir}/termstats_merged.xml">
        </move>
        
        
        
        <!--
            Convert the XML data to XHTML.
            The content of the <head> element and the <body> element
            will later be injected into the termstats topic.
        -->
        <fail unless="args.default.language">'args.default.language' is not set, e.g. to 'en-GB'</fail>
        <fail>
            File ${dita.temp.dir}/termstats_merged.xml is not available
            <condition>
                <and>
                    <isset property="args.termstats"/>
                    <not>
                        <available file="${dita.temp.dir}/termstats_merged.xml"/>
                    </not>
                </and>
            </condition>
        </fail>
        <xslt
            basedir="${dita.temp.dir}"
            destdir="${output.dir}"
            in="${dita.temp.dir}/termstats_merged.xml"
            out="${dita.temp.dir}${file.separator}terminology_stats.html"
            reloadstylesheet="${dita.xhtml.reloadstylesheet}"
            classpathref="dost.class.path"
            extension=".html"
            style="${dita.plugin.org.doctales.terminology.dir}/xsl/terminology-stats-xml2html.xsl"
            filenameparameter="FILENAME" 
            filedirparameter="FILEDIR">
            <param name="outext" expression="${args.outext}"/>
            <param name="language" expression="${args.default.language}"/>
            <xmlcatalog refid="dita.catalog"/>
        </xslt>
        
        <!--
            Copy the XML file to the output dir.
            It has to be shipped with the webhelp to be used as an input parameter for the next publication.
        -->
        <copy
            file="${dita.temp.dir}/termstats_merged.xml"
            tofile="${output.dir}/termstats.xml">
        </copy>
        
        <loadfile srcFile="${dita.temp.dir}${file.separator}terminology_stats.html" property="terminlogy_stats.head">
            <filterchain>
                <replaceregex pattern="\s\s+" replace=" "/>
                <trim/>
                <ignoreblank/>
                <striplinebreaks/>
                <replaceregex pattern="(.*)&lt;!--HEAD BEGINNING--&gt;" replace=""/>
                <replaceregex pattern="&lt;!--HEAD END--&gt;(.*)" replace=""/>
            </filterchain>
        </loadfile>
        <echo>terminlogy_stats.head=${terminlogy_stats.head}</echo>
        
        <loadfile srcFile="${dita.temp.dir}${file.separator}terminology_stats.html" property="terminology_stats.body">
            <filterchain>
                <replaceregex pattern="\s\s+" replace=" "/>
                <trim/>
                <ignoreblank/>
                <striplinebreaks/>
                <replaceregex pattern="(.*)&lt;!--BODY BEGINNING--&gt;" replace=""/>
                <replaceregex pattern="&lt;!--BODY END--&gt;(.*)" replace=""/>
            </filterchain>
        </loadfile>
        
        <!-- Get filename of termstats topic -->
        <xmltask source="${dita.temp.dir}${file.separator}${basename}.ditamap">
            <copy path="//*[contains(@type, 'termstats')]/@href" property="termstats-file" attrValue="yes"/>
        </xmltask>
        <echo>termstats-file=${termstats-file}</echo>
        
        <!-- Replace file suffix -->
        <loadresource if:set="termstats-file" property="termstats-file-html">
            <propertyresource name="termstats-file"/>
            <filterchain>
                <tokenfilter>
                    <replacestring from=".dita" to=".html"/>
                    <replacestring from=".xml" to=".html"/>
                </tokenfilter>
            </filterchain>
        </loadresource>
        
        <replaceregexp
            file="${output.dir}/${termstats-file-html}"
            match="&lt;head&gt;"
            replace="&lt;head&gt;${terminlogy_stats.head}"
            flags="i"
            byline="false">
        </replaceregexp>
        
        <echo level="info">
            Replace &lt;div class="div stats"&gt; placeholder element of: ${output.dir}/${termstats-file-html}
        </echo>
        
        <replaceregexp
            file="${output.dir}/${termstats-file-html}" 
            match="&lt;div class=&quot;(.+?)termstats-d\/stats(.+?)&quot;&gt;(.*)&lt;\/div&gt;" 
            replace="${terminology_stats.body}" 
            flags="i" 
            byline="false">
        </replaceregexp>
    </target>
    
    <target if:set="generate-semanticnet" name="semanticnet" depends="-is-xmltask-available">
        <fail unless="args.default.language">'args.default.language' is not set, e.g. to 'en-GB'</fail>
        <basename property="basename" file="${args.input}" suffix=".ditamap"/>
        <xslt basedir="${dita.temp.dir}"
            destdir="${output.dir}"
            in="${dita.temp.dir}${file.separator}${basename}.ditamap"
            out="${dita.temp.dir}${file.separator}${basename}_net.html"
            reloadstylesheet="${dita.xhtml.reloadstylesheet}"
            classpathref="dost.class.path"
            extension=".html"
            style="${dita.plugin.org.doctales.terminology.dir}/xsl/semanticnet.xsl"
            filenameparameter="FILENAME" 
            filedirparameter="FILEDIR">
            <xmlcatalog refid="dita.catalog"/>
            <param name="language" expression="${args.default.language}"/>
        </xslt>
        <replaceregexp file="${dita.temp.dir}/${basename}_net.html" match="\[[/\r?\n|\r/]*\s+\,*\{" replace="[{" flags="g"/>
        <replaceregexp file="${dita.temp.dir}/${basename}_net.html" match="\}\,*[/\r?\n|\r/]*\s+\]" replace="}]" flags="g"/>
        
        <!-- Read <head> from semantic net -->
        <loadfile srcFile="${dita.temp.dir}/${basename}_net.html" property="semantic-net.head">
            <filterchain>
                <replaceregex pattern="\s\s+" replace=" "/>
                <trim/>
                <ignoreblank/>
                <striplinebreaks/>
                <replaceregex pattern="&lt;!DOCTYPE(.*)&lt;\/title&gt;" replace=""/>
                <replaceregex pattern="&lt;\/head&gt;(.*)&lt;\/html&gt;" replace=""/>
            </filterchain>
        </loadfile>
        
        <!-- Read <body> from semantic net -->
        <loadfile srcFile="${dita.temp.dir}/${basename}_net.html" property="semantic-net.body">
            <filterchain>
                <replaceregex pattern="\s\s+" replace=" "/>
                <ignoreblank/>
                <striplinebreaks/>
                <replaceregex pattern="&lt;!DOCTYPE(.*)&lt;body&gt;" replace=""/>
                <replaceregex pattern="&lt;\/body&gt;&lt;\/html&gt;" replace=""/>
            </filterchain>
        </loadfile>
        
        <!-- Get filename of semantic-net topic -->
        <xmltask source="${dita.temp.dir}${file.separator}${basename}.ditamap">
            <copy path="//*[contains(@type, 'semanticnet')]/@href" property="semantic-net-file" attrValue="yes"/>
        </xmltask>
        
        <!-- Replace file suffix -->
        <loadresource property="semantic-net-file-html">
            <propertyresource name="semantic-net-file"/>
            <filterchain>
                <tokenfilter>
                    <replacestring from=".dita" to=".html"/>
                    <replacestring from=".xml" to=".html"/>
                </tokenfilter>
            </filterchain>
        </loadresource>

        <!-- Replace certain parts of the topic with the semantic net data -->
        <replaceregexp file="${output.dir}/${semantic-net-file-html}"
            match="&lt;head&gt;"
            replace="&lt;head&gt;${semantic-net.head}"
            flags="gis"
            byline="false">
        </replaceregexp>
        
        <replaceregexp file="${output.dir}/${semantic-net-file-html}"
            match="&lt;div class=&quot;(.+?)semanticnet-d\/net(.+?)&quot;&gt;(.*)&lt;\/div&gt;"
            replace="${semantic-net.body}"
            flags="i"
            byline="false">
        </replaceregexp>
        
        <!--
            The vis.js script needs to be injected as the first lib to the head.
            We have no extension point for this, so we need to make this dirty.
        -->
        <loadfile srcfile="${dita.plugin.org.doctales.terminology.dir}/framework/webhelp-skin/header/vis.js.txt" property="vis.js.txt"/>
        <replaceregexp file="${output.dir}/${semantic-net-file-html}"
            match="&lt;script"
            replace="${vis.js.txt}&lt;script"
            flags="is"
            byline="false">
        </replaceregexp>
        
        <copy file="${dita.temp.dir}${file.separator}${basename}_net.html" todir="${output.dir}"/>
    </target>
    
</project>
