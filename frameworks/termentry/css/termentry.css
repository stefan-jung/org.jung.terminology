/*@import url("flags.css");*/
/* Using Google Fonts can cause incompatibility issues, because this implies that Google Fonts need to be configured
 * as trusted host. Further on, this could lead to data privacy issues, so we don't do this any longer. */

@namespace xml "http://www.w3.org/XML/1998/namespace";

* {
    font-size: 10pt;
}


/*********************************************
 * Dark Theme
 *********************************************/
@media oxygen-high-contrast-black, oxygen-dark-theme {
    *[class~="termentry/definition"],
    *[class~="termentry/definitionText"],
    *[class~="termentry/definitionSource"],
    *[class~="topic/fig"][class~="equation-d/equation-figure"],
    *[class~="topic/fig"],
    *[class~="topic/fig"] > *[class~="topic/title"],
    *[class~="topic/fig"] > *[class~="topic/image"],
    *[class~="termentry/termSource"],
    *[class~="termentry/sourceName"],
    *[class~="termentry/sourceReference"],
    *[class~="termentry/altDefinition"],
    *[class~="termentry/altDefinitionText"],
    *[class~="termentry/annotation"],
    *[class~="termentry/termContext"],
    *[class~="termentry/termContextText"],
    *[class~="termentry/termContextSource"],
    *[class~="termentry/partOfSpeech"],
    *[class~="topic/note"],
    *[class~="termentry/domains"],
    *[class~="termentry/agreedWith"],
    *[class~="termentry/termCommitteeMember"],
    *[class~="termentry/termNotation"],
    *[class~="termentry/antonyms"],
    *[class~="termentry/instancesOf"],
    *[class~="termentry/partsOf"],
    *[class~="termentry/superordinateConcepts"],
    *[class~="termentry/subordinateConcepts"],
    *[class~="termentry/relatedTerms"],
    *[class~="termentry/relations-linklist"],
    *[class~="termentry/termRelation"] {
        border-color: #767676;
    }
}
@media oxygen-high-contrast-black, oxygen-dark-theme {
    *:before,
    *:after {
        color: orange !important;
    }
}


/******************************************************************************************
 * Common properties for block elements
 ******************************************************************************************/
*[class~="termentry/annotation"],
*[class~="termentry/definition"],
*[class~="termentry/definitionSource"],
*[class~="termentry/domains"],
*[class~="termentry/termContext"],
*[class~="termentry/termContextSource"],
*[class~="termentry/termContextText"],
*[class~="termentry/termNotation"],
*[class~="termentry/termSource"],
*[class~="topic/fig"],
*[class~="topic/fig"][class~="equation-d/equation-figure"],
*[class~="topic/fig"] > *[class~="topic/image"],
*[class~="topic/image"] > *[class~="topic/alt"],
*[class~="topic/note"] {
    -oxy-display-tags: none;
    -oxy-editable: true;
    border-color: #3d3d3d;
    border-radius: 5px;
    border-style: solid;
    border-width: 0.05rem;
    display: block;
    font-family: Arial, sans-serif;
    margin-left: 5px;
    margin-right: 5px;
    margin-top: 5px;
    padding-bottom: 5px;
}

/******************************************************************************************
 * Common :before(10) for block elements
 ******************************************************************************************/
*[class~="termentry/agreedWith"]:before(10),
*[class~="termentry/annotation"]:before(10),
*[class~="termentry/definition"]:before(10),
*[class~="termentry/definitionSource"]:before(10),
*[class~="termentry/domains"]:before(10),
*[class~="termentry/termContext"]:before(10),
*[class~="termentry/termContextSource"]:before(10),
*[class~="termentry/termContextText"]:before(10),
*[class~="termentry/termNotation"]:before(10),
*[class~="termentry/termSource"]:before(10),
*[class~="topic/fig"]:before(10), 
*[class~="topic/fig"][class~="equation-d/equation-figure"]:before(10),
*[class~="topic/fig"] > *[class~="topic/image"]:before(10),
*[class~="topic/image"] > *[class~="topic/alt"]:before(10),
*[class~="topic/note"]:before(10) {
    -oxy-display-tags: none;
    background-color: rgba(240, 240, 240, 0.3);
    border-bottom: 0.05rem solid #767676;
    display: block;
    font-size: 10px;
    font-weight: bold;
    margin-bottom: 2px; 
    padding-top: 5px; /* This is to fix the appearance of the block in Content Fusion. */
    padding-bottom: 5px; /* This is to fix the appearance of the block in Content Fusion. */
    padding-left: 5px;
    height: 15px; /* This is to fix the appearance of the block in Content Fusion. */
    line-height: 15px; /* This is to fix the appearance of the block in Content Fusion. */
}

/******************************************************************************************
 * Common properties for block elements w/o border and w/o :before(10) block
 ******************************************************************************************/
*[class~="termentry/definitionText"],
*[class~="termentry/termContextText"] {
    -oxy-display-tags: none;
    -oxy-editable: true;
    -oxy-placeholder-content: "${i18n(term.definitionText.placeholder)}";
    -oxy-show-placeholder: always;
    border: none !important;
    display: block;
    font-family: Arial, sans-serif;
    margin-bottom: 5px;
    margin-left: 5px;
    margin-right: 5px;
    margin-top: 5px;
}

/******************************************************************************************
 * Common properties for inline elements
 ******************************************************************************************/
*[class~="termentry/sourceName"],
*[class~='termentry/sourceReference'],
*[class~='termentry/termCommitteeMember'],
*[class~="termentry/termVariant"],
*[class~="topic/fig"] > *[class~="topic/title"] {
    -oxy-display-tags: none;
    -oxy-editable: true;
    -oxy-placeholder-content: "${i18n(term.sourceName.placeholder)}";
    -oxy-show-placeholder: always;
    display: block;
    margin-bottom: 5px;
    margin-left: 5px;
    margin-right: 5px;
    margin-top: 5px;
    width: 99% !important;
}

/******************************************************************************************
 * Common properties :before(10) for inline elements
 ******************************************************************************************/
*[class~="termentry/sourceName"]:before(10),
*[class~='termentry/sourceReference']:before(10),
*[class~='termentry/termCommitteeMember']:before(10),
*[class~="termentry/termVariant"]:before(10),
*[class~="topic/fig"] > *[class~="topic/title"]:before(10) {
    display: inline;
    font-family: Arial, sans-serif;
    font-size: 10px;
    font-weight: bold;
    padding-left: 0.5em;
    padding-left: 5px;
    width: 20%;
}

/******************************************************************************************
 * Common properties for term relations
 ******************************************************************************************/
*[class~="termentry/termRelation"] {
    display: block;
    font-family: Arial, sans-serif;
    margin-left: 5px;
    margin-right: 5px;
    margin-bottom: 5px;
    margin-top: 5px;
    -oxy-display-tags: none;
    -oxy-show-placeholder: always;
    -oxy-editable: true;
    -oxy-show-placeholder: no !important;
    visibility: -oxy-collapse-text;
}

/******************************************************************************************
 * Common properties :before(10) for term relations
 ******************************************************************************************/
*[class~="termentry/termRelation"]:before(10) {
    width: 20%;
    font-weight: bold;
    display: inline;
    padding-left: 5px;
    font-family: Arial, sans-serif;
    font-size: 10px;
}


/*********************************************
 * TERMENTRY
 *********************************************/
*[class~="termentry/termentry"] {
    -oxy-display-tags: none;
    display: block;
    font-family: Arial, sans-serif;
    font-size: 0.9rem;
    font-style: normal;
    font-weight: 400;
    line-height: 1.2;
    margin-bottom: 24px;
    margin-left: auto;
    margin-right: auto;
    margin-top: 24px;
    min-height: 378px;
    outline-width: 0;
    padding-bottom: 80px;
    padding-top: 32px;
    /*text-decoration-color: rgba(0,0,0,1.0);
    text-decoration-line: none;
    text-decoration-style: solid;*/
    width: 768px;
}
*[class~="termentry/termentry"] > *[class~="topic/title"] {
    -oxy-display-tags: none;
    -oxy-placeholder-content: '${i18n(term.title)}';
    -oxy-show-placeholder: always;
    font-family: Arial, sans-serif;
    font-size: 2em;
    font-weight: bold;
}
*[class~="termentry/termentry"] > *[class~="topic/title"]:after {
    border-bottom: 0.05rem solid #767676;
    content:
        oxy_buttonGroup(
            label, '${i18n(term.conceptLevel)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.definition.add'),
                oxy_action(id, 'term.agreedWith.add'),
                oxy_action(id, 'term.altDefinition.add'),
                oxy_action(id, 'term.equation-figure.add'),
                oxy_action(id, 'term.note.add'),
                oxy_action(id, 'term.fig.add'),
                oxy_action(id, 'term.annotation.add'),
                oxy_action(id, 'term.domains.add')
            )
        );
    display: block;
    font-size: 16px;
    margin-bottom: 2px;
    margin-top: 16px;
    padding-bottom: 5px;
}

/*********************************************
 * TERM BODY
 *********************************************/
*[class~="termentry/termBody"] {
    margin-top: 2.0em;
}
*[class~="termentry/termBody"]:after {
    border-bottom: 0.05rem solid #767676;
    content:
    oxy_buttonGroup(
        label, '${i18n(term.relations)}',
        transparent, 'true',
        fontInherit, 'true',
        actions,
        oxy_action_list(
            oxy_action(id, 'term.antonyms.add'),
            oxy_action(id, 'term.partsOf.add'),
            oxy_action(id, 'term.instancesOf.add'),
            oxy_action(id, 'term.superordinateConcepts.add'),
            oxy_action(id, 'term.subordinateConcepts.add'),
            oxy_action(id, 'term.relatedTerms.add'),
            oxy_action(id, 'term.relations.delete')
        )
    );
    display: block;
    font-size: 16px;
    font-weight: bold;
    margin-bottom: 2px;
    margin-top: 2em !important;
    padding-bottom: 5px;
}
*[class~="termentry/termBody"]:after(2) {
    content:
        oxy_xpath('if (following-sibling::*[contains(@class, " termentry/relations ")]) then "" else "No relations defined"');
}

/*********************************************
 * DEFINITION
 *********************************************/
*[class~="termentry/definition"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.definition)}',
            transparent, true,
            fontInherit, true,
            actions,
            oxy_action_list(
                oxy_action(id, 'term.definitionSource.add'),
                oxy_action(id, 'term.definition.delete')
            )
        );
}

/*********************************************
 * DEFINITION TEXT
 * The properties are defined in 'Common properties for block elements w/o border and w/o :before(10) block'
 *********************************************/
*[class~="termentry/definitionText"] {
    -oxy-placeholder-content: "${i18n(term.definitionText.placeholder)}";
    -oxy-show-placeholder: always;
}

/*********************************************
 * DEFINITION SOURCE
 *********************************************/
*[class~="termentry/definitionSource"]:before(10) {
    content:
       oxy_buttonGroup(
           label, '${i18n(term.definitionSource)}',
           transparent, 'true',
           fontInherit, 'true',
           actions,
           oxy_action_list(
               oxy_action(id, 'term.sourceName.add'),
               oxy_action(id, 'term.url.reference'),
               oxy_action(id, 'term.definitionSource.delete')
           )
       );
}
*[class~="termentry/definitionSource"]:empty {
    content:
        oxy_button(
            actionID, 'term.sourceName.add',
            showIcon, false
        )
        oxy_button(
            actionID, 'term.sourceReference.add',
            showIcon, false
        )
}

/*********************************************
 * EQUATION FIGURE
 *********************************************/
*[class~="topic/fig"][class~="equation-d/equation-figure"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.equation-figure)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.equation-figure.delete')
            )
        );
}
*[class~="topic/fig"][class~="equation-d/equation-figure"]:before {
    content: "" !important;
}
*[class~="topic/fig"][class~="equation-d/equation-figure"] {
    content:
        oxy_textArea(
            edit, '#content',
            contentType, 'text/xml',
            width, 100%
        );
}

/*********************************************
 * FIG
 *********************************************/
*[class~="topic/fig"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.fig)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.fig.delete')
            )
        );
}
*[class~="topic/fig"] > *[class~="topic/title"]:before(10) {
    content: "${i18n(term.fig.title)}";
}

/*********************************************
 * IMAGE
 *********************************************/
*[class~="topic/image"]:before(10) {
    content:
    oxy_buttonGroup(
        label, '${i18n(term.image)}',
        transparent, 'true',
        fontInherit, 'true',
        actions,
        oxy_action_list(
            oxy_action(id, 'term.imageReference.add'),
            oxy_action(id, 'term.alt.add'),
            oxy_action(id, 'term.image.delete')
        )
    );
}
*[class~="topic/image"][href]:not([keyref]) {
    content: attr(href, url);
}
*[class~="topic/image"][keyref]:not([href]) {
    content: attr(keyref, keyref);
}

/*********************************************
 * ALT
 *********************************************/
*[class~="topic/image"] > *[class~="topic/alt"]:before(10) {
    content:
    oxy_buttonGroup(
        label, '${i18n(term.alt)}',
        transparent, 'true',
        fontInherit, 'true',
        actions,
        oxy_action_list(
            oxy_action(id, 'term.alt.delete')
        )
    );
}

/*********************************************
 * TERM SOURCE
 *********************************************/
*[class~="termentry/termSource"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.termSource)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.sourceName.add'),
                oxy_action(id, 'term.url.reference'),
                oxy_action(id, 'term.sourceName.delete'),
                oxy_action(id, 'term.sourceReference.delete'),
                oxy_action(id, 'term.termSource.delete')
            )
        );
}

/*********************************************
 * SOURCE NAME
 *********************************************/
*[class~="termentry/sourceName"]:before(10) {
    content:
    oxy_buttonGroup(
        label, '${i18n(term.sourceName)}',
        transparent, 'true',
        fontInherit, 'true',
        actions,
        oxy_action_list(
            oxy_action(id, 'term.sourceReference.renameTo'),
            oxy_action(id, 'term.sourceName.delete')
        )
    );
}

/*********************************************
 * SOURCE REFERENCE
 *********************************************/
*[class~="termentry/sourceReference"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.sourceReference)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.sourceName.renameTo'),
                oxy_action(id, 'term.sourceReference.delete')
            )
        );
}
*[class~="termentry/sourceReference"][format='html']:not([href]):empty {
    content:
        oxy_urlChooser(
            edit, '@href',
            columns, 40
        );
}
*[class~="termentry/sourceReference"][href] {
    text-decoration: underline;
    link: attr(href);
}
*[class~="termentry/sourceReference"][href]:focus {
    -oxy-display-tags: none;
    -oxy-editable: true;
    -oxy-placeholder-content: "${i18n(term.sourceReference.placeholder)}";
    -oxy-show-placeholder: always;
    display: block;
    font-family: Arial, sans-serif;
    margin-bottom: 5px;
    margin-left: 5px;
    margin-right: 5px;
    margin-top: 5px;
    text-decoration: none;
}
*[class~="termentry/sourceReference"][href]:focus:after {
    content: "   "
        oxy_urlChooser(
            edit, '@href',
            columns, 40
        );
}

/*********************************************
 * ALTERNATIVE DEFINITION
 *********************************************/
*[class~="termentry/altDefinition"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.altDefinition)}',
            transparent, 'true',
            fontInherit, false,
            actions,
            oxy_action_list(
                oxy_action(id, 'term.definitionSource.add'),
                oxy_action(id, 'term.altDefinition.delete')
            )
        );
}

/*********************************************
 * ANNOTATION
 *********************************************/
*[class~="termentry/annotation"]:before(10) {
    content:
    oxy_buttonGroup(
        label, '${i18n(term.annotation)}',
        transparent, 'true',
        fontInherit, 'true',
        actions,
        oxy_action_list(
            oxy_action(id, 'term.annotation.delete')
        )
    );
}

/*********************************************
 * TERM CONTEXT
 *********************************************/
*[class~="termentry/termContext"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.termContext)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.termContextText.add'),
                oxy_action(id, 'term.termContext.delete')
            )
        );
}

/*********************************************
 * TERM CONTEXT SOURCE
 *********************************************/
*[class~="termentry/termContextSource"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.termContextSource)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.sourceName.add'),
                oxy_action(id, 'term.sourceReference.add'),
                oxy_action(id, 'term.termContextSource.delete')
            )
        );
}
*[class~="termentry/termContextSource"] {
    -oxy-placeholder-content: "${i18n(term.termContextSource.placeholder)}";
    -oxy-show-placeholder: always;
}

/*********************************************
 * TERM CONTEXT TEXT
 * 
 * The properties are defined in 'Common properties for block elements w/o border and w/o :before(10) block'
 *********************************************/
*[class~="termentry/termContextText"] {
    -oxy-placeholder-content: "${i18n(term.definitionText.placeholder)}";
    -oxy-show-placeholder: always;
}

/*********************************************
 * PART OF SPEECH
 *********************************************/
*[class~="termentry/partOfSpeech"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.partOfSpeech)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.partOfSpeech.delete')
            )
        )
        "   "
        oxy_popup(
            edit, '@value',
            values, 'noun, pronoun, adjective, verb, adverb, preposition, conjunction, interjection, article, other',
            labels, '${i18n(term.partOfSpeech.noun)}, ${i18n(term.partOfSpeech.pronoun)}, ${i18n(term.partOfSpeech.adjective)}, ${i18n(term.partOfSpeech.verb)}, ${i18n(term.partOfSpeech.adverb)}, ${i18n(term.partOfSpeech.preposition)}, ${i18n(term.partOfSpeech.conjunction)}, ${i18n(term.partOfSpeech.interjection)}, ${i18n(term.partOfSpeech.article)}, ${i18n(term.partOfSpeech.other)}',
            columns, 15,
            selectionMode, 'single',
            fontInherit, true
        );
    border-color: #3d3d3d;
    border-radius: 5px;
    border-style: solid;
    border-width: 0.05rem;
    display: block;
    font-size: 10px;
    font-weight: bold;
    margin-bottom: 5px;
    margin-top: 12px;
    padding-left: 5px;
}
*[class~="termentry/partOfSpeech"] {
    -oxy-display-tags: none;
    -oxy-editable: true;
    -oxy-show-placeholder: always;
    -oxy-show-placeholder: no !important;
    display: block;
    font-family: Arial, sans-serif;
    margin-bottom: 5px;
    margin-left: 5px;
    margin-right: 5px;
    margin-top: 15px;
}

/* This is a trick to simulate the term-level. */
*[class~="termentry/partOfSpeech"]:after {
    content: " ";
    font-size: 3pt;
    display: block;
    width: 100%;
}

/* This is a trick to simulate the term-level. */
*[class~="termentry/partOfSpeech"]:after(100) {
    border-left: none;
    border-right: none;
    border-top: none;
    border-bottom: 0.05rem solid #767676;
    font-size: 16px;
    font-weight: bold;
    content:
        oxy_buttonGroup(
            label, '${i18n(term.termLevel)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.abbreviation.add'),
                oxy_action(id, 'term.acronym.add'),
                oxy_action(id, 'term.fullForm.add'),
                oxy_action(id, 'term.verb.add')
            )
        );
}

/*********************************************
 * NOTE
 *********************************************/
*[class~="topic/note"]:before(10) {
    content:
    oxy_buttonGroup(
        label, '${i18n(term.note)}',
        transparent, 'true',
        fontInherit, 'false',
        actions,
        oxy_action_list(
            oxy_action(id, 'term.note.delete')
        )
    );
}
*[class~="topic/note"] {
    -oxy-placeholder-content: "${i18n(term.note.placeholder)}";
    -oxy-show-placeholder: always;
}

/*********************************************
 * DOMAINS
 *********************************************/
*[class~="termentry/domains"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.domains)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.domain.add'),
                oxy_action(id, 'term.domains.delete')
            )
        );
}

/*********************************************
 * DOMAIN
 *********************************************/
*[class~="termentry/domain"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.domain)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.domain.add'),
                oxy_action(id, 'term.domain.delete')
            )
        );
    display: inline;
    font-family: Arial, sans-serif;
    font-size: 10px;
    font-weight: bold;
    padding-left: 5px;
    width: 20%;
}
*[class~="termentry/domain"][class~="termentry/concept-domain"] {
    width: 75%;
    display: block;
    float: right;
    -oxy-display-tags: none;
    visibility: -oxy-collapse-text;
    -oxy-show-placeholder: no !important; 
}
*[class~="termentry/domain"][class~="termentry/concept-domain"] {
    content:
        oxy_popup(
            edit, '@concept-domain'
        );
    padding-bottom: 5px;
}
*[class~="termentry/domain"][class~="termentry/term-domain"] {
    content:
        oxy_popup(
            edit, '@term-domain'
        );
    padding-bottom: 5px;
}

/*********************************************
 * AGREED WITH
 *********************************************/
*[class~="termentry/agreedWith"]:before(10) {
    background-color: rgba(240, 240, 240, 0.3);
    border-bottom: 0.05rem solid #767676;
    content:
        oxy_buttonGroup(
            label, '${i18n(term.agreedWith)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.termCommitteeMember.add'),
                oxy_action(id, 'term.agreedWith.delete')
            )
        );
    display: block;
    font-size: 10px;
    margin-bottom: 2px;
    padding-bottom: 5px;
    padding-left: 5px;
}
*[class~="termentry/agreedWith"] {
    -oxy-display-tags: none;
    -oxy-editable: true;
    -oxy-show-placeholder: always;
    border-color: #3d3d3d;
    border-radius: 5px;
    border-style: solid;
    border-width: 0.05rem;
    display: block;
    font-family: Arial, sans-serif;
    margin-bottom: 5px;
    margin-left: 5px;
    margin-right: 5px;
}

/*********************************************
 * TERM COMMITTEE MEMBER
 *********************************************/
*[class~="termentry/termCommitteeMember"]:before(10) {
    content:
        oxy_buttonGroup(
        label, '${i18n(term.termCommitteeMember)}',
        transparent, 'true',
        fontInherit, 'true',
        actions,
        oxy_action_list(
            oxy_action(id, 'term.termCommitteeMember.add'),
            oxy_action(id, 'term.termCommitteeMember.delete')
        )
    );
}
*[class~="termentry/termCommitteeMember"] {
    -oxy-placeholder-content: "${i18n(term.termCommitteeMember.placeholder)}";
    -oxy-show-placeholder: always;
}

/*********************************************
 * TERM NOTATION
 *********************************************/
*[class~="termentry/termNotation"]:before(10) {
    padding-left: 5px;
    background-color: rgba(240, 240, 240, 0.3);
    border-bottom: 0.05rem solid #767676;
    font-size: 10px;
    font-weight: bold;
    content:
        oxy_buttonGroup(
            label, oxy_xpath(" \
                if (contains(@class, 'fullForm')) then '${i18n(term.fullForm)}' \
                else if (contains(@class, 'abbreviation')) then '${i18n(term.abbreviation)}' \
                else if (contains(@class, 'acronym')) then '${i18n(term.acronym)}' \
                else if (contains(@class, 'verb')) then '${i18n(term.verb)}' \
                else '' \
                "),
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.abbreviation.add'),
                oxy_action(id, 'term.acronym.add'),
                oxy_action(id, 'term.fullForm.add'),
                oxy_action(id, 'term.verb.add'),
                oxy_action(id, 'term.term-domains.add'),
                oxy_action(id, 'term.abbreviation.renameTo'),
                oxy_action(id, 'term.acronym.renameTo'),
                oxy_action(id, 'term.verb.renameTo'),
                oxy_action(id, 'term.fullForm.delete')
            )
        )
        "   "
        oxy_label(
            text, "${i18n(term.language)} ",
            styles, "font-weight: bold;"
        )
        " "
        oxy_popup(
            edit, '@language',
            columns, 5,
            selectionMode, 'single',
            fontInherit, 'false'
        )
        oxy_url(oxy_xpath(" \
            if (@language = 'af-ZA') then '../flag-icon-css/za.svg' \
            else if (@language = 'ar-AE') then '../flag-icon-css/ae.svg' \
            else if (@language = 'ar-BH') then '../flag-icon-css/bh.svg' \
            else if (@language = 'ar-DZ') then '../flag-icon-css/dz.svg' \
            else if (@language = 'ar-EG') then '../flag-icon-css/eg.svg' \
            else if (@language = 'ar-IQ') then '../flag-icon-css/iq.svg' \
            else if (@language = 'ar-JO') then '../flag-icon-css/jo.svg' \
            else if (@language = 'ar-KW') then '../flag-icon-css/kw.svg' \
            else if (@language = 'ar-LB') then '../flag-icon-css/lb.svg' \
            else if (@language = 'ar-LY') then '../flag-icon-css/ly.svg' \
            else if (@language = 'ar-MA') then '../flag-icon-css/ma.svg' \
            else if (@language = 'ar-OM') then '../flag-icon-css/om.svg' \
            else if (@language = 'ar-QA') then '../flag-icon-css/qa.svg' \
            else if (@language = 'ar-SA') then '../flag-icon-css/sa.svg' \
            else if (@language = 'ar-SY') then '../flag-icon-css/sy.svg' \
            else if (@language = 'ar-TN') then '../flag-icon-css/tn.svg' \
            else if (@language = 'ar-YE') then '../flag-icon-css/ye.svg' \
            else if (@language = 'be-BY') then '../flag-icon-css/by.svg' \
            else if (@language = 'bg-BG') then '../flag-icon-css/bg.svg' \
            else if (@language = 'ca-ES') then '../flag-icon-css/es.svg' \
            else if (@language = 'cs-CZ') then '../flag-icon-css/cz.svg' \
            else if (@language = 'Cy-az-AZ') then '../flag-icon-css/az.svg' \
            else if (@language = 'Cy-sr-SP') then '../flag-icon-css/sr.svg' \
            else if (@language = 'Cy-uz-UZ') then '../flag-icon-css/uz.svg' \
            else if (@language = 'da-DK') then '../flag-icon-css/dk.svg' \
            else if (@language = 'de-AT') then '../flag-icon-css/at.svg' \
            else if (@language = 'de-CH') then '../flag-icon-css/ch.svg' \
            else if (@language = 'de-DE') then '../flag-icon-css/de.svg' \
            else if (@language = 'de-LI') then '../flag-icon-css/li.svg' \
            else if (@language = 'de-LU') then '../flag-icon-css/lu.svg' \
            else if (@language = 'div-MV') then '../flag-icon-css/mv.svg' \
            else if (@language = 'el-GR') then '../flag-icon-css/gr.svg' \
            else if (@language = 'en-AU') then '../flag-icon-css/au.svg' \
            else if (@language = 'en-BZ') then '../flag-icon-css/bz.svg' \
            else if (@language = 'en-CA') then '../flag-icon-css/ca.svg' \
            else if (@language = 'en-CB') then '../flag-icon-css/cb.svg' \
            else if (@language = 'en-GB') then '../flag-icon-css/gb.svg' \
            else if (@language = 'en-IE') then '../flag-icon-css/ie.svg' \
            else if (@language = 'en-JM') then '../flag-icon-css/jm.svg' \
            else if (@language = 'en-NZ') then '../flag-icon-css/nz.svg' \
            else if (@language = 'en-PH') then '../flag-icon-css/ph.svg' \
            else if (@language = 'en-TT') then '../flag-icon-css/tt.svg' \
            else if (@language = 'en-US') then '../flag-icon-css/us.svg' \
            else if (@language = 'en-ZA') then '../flag-icon-css/za.svg' \
            else if (@language = 'en-ZW') then '../flag-icon-css/zw.svg' \
            else if (@language = 'es-AR') then '../flag-icon-css/ar.svg' \
            else if (@language = 'es-BO') then '../flag-icon-css/bo.svg' \
            else if (@language = 'es-CL') then '../flag-icon-css/cl.svg' \
            else if (@language = 'es-CO') then '../flag-icon-css/co.svg' \
            else if (@language = 'es-CR') then '../flag-icon-css/cr.svg' \
            else if (@language = 'es-DO') then '../flag-icon-css/do.svg' \
            else if (@language = 'es-EC') then '../flag-icon-css/ec.svg' \
            else if (@language = 'es-ES') then '../flag-icon-css/es.svg' \
            else if (@language = 'es-GT') then '../flag-icon-css/gt.svg' \
            else if (@language = 'es-HN') then '../flag-icon-css/hn.svg' \
            else if (@language = 'es-MX') then '../flag-icon-css/mx.svg' \
            else if (@language = 'es-NI') then '../flag-icon-css/ni.svg' \
            else if (@language = 'es-PA') then '../flag-icon-css/pa.svg' \
            else if (@language = 'es-PE') then '../flag-icon-css/pe.svg' \
            else if (@language = 'es-PR') then '../flag-icon-css/pr.svg' \
            else if (@language = 'es-PY') then '../flag-icon-css/py.svg' \
            else if (@language = 'es-SV') then '../flag-icon-css/sv.svg' \
            else if (@language = 'es-UY') then '../flag-icon-css/uy.svg' \
            else if (@language = 'es-VE') then '../flag-icon-css/ve.svg' \
            else if (@language = 'et-EE') then '../flag-icon-css/ee.svg' \
            else if (@language = 'eu-ES') then '../flag-icon-css/es.svg' \
            else if (@language = 'fa-IR') then '../flag-icon-css/ir.svg' \
            else if (@language = 'fi-FI') then '../flag-icon-css/fi.svg' \
            else if (@language = 'fo-FO') then '../flag-icon-css/fo.svg' \
            else if (@language = 'fr-FR') then '../flag-icon-css/fr.svg' \
            else if (@language = 'fr-BE') then '../flag-icon-css/be.svg' \
            else if (@language = 'fr-CA') then '../flag-icon-css/ca.svg' \
            else if (@language = 'fr-CH') then '../flag-icon-css/ch.svg' \
            else if (@language = 'fr-FR') then '../flag-icon-css/fr.svg' \
            else if (@language = 'fr-LU') then '../flag-icon-css/lu.svg' \
            else if (@language = 'fr-MC') then '../flag-icon-css/mc.svg' \
            else if (@language = 'gl-ES') then '../flag-icon-css/es.svg' \
            else if (@language = 'gu-IN') then '../flag-icon-css/in.svg' \
            else if (@language = 'he-IL') then '../flag-icon-css/il.svg' \
            else if (@language = 'hi-IN') then '../flag-icon-css/in.svg' \
            else if (@language = 'hr-HR') then '../flag-icon-css/hr.svg' \
            else if (@language = 'hu-HU') then '../flag-icon-css/hu.svg' \
            else if (@language = 'hy-AM') then '../flag-icon-css/am.svg' \
            else if (@language = 'id-ID') then '../flag-icon-css/id.svg' \
            else if (@language = 'is-IS') then '../flag-icon-css/is.svg' \
            else if (@language = 'it-CH') then '../flag-icon-css/ch.svg' \
            else if (@language = 'it-IT') then '../flag-icon-css/it.svg' \
            else if (@language = 'ja-JP') then '../flag-icon-css/jp.svg' \
            else if (@language = 'ka-GE') then '../flag-icon-css/ge.svg' \
            else if (@language = 'kk-KZ') then '../flag-icon-css/kz.svg' \
            else if (@language = 'kn-IN') then '../flag-icon-css/in.svg' \
            else if (@language = 'ko-KR') then '../flag-icon-css/kr.svg' \
            else if (@language = 'kok-IN') then '../flag-icon-css/in.svg' \
            else if (@language = 'ky-KZ') then '../flag-icon-css/kz.svg' \
            else if (@language = 'lt-LT') then '../flag-icon-css/lt.svg' \
            else if (@language = 'Lt-az-AZ') then '../flag-icon-css/az.svg' \
            else if (@language = 'Lt-sr-SP') then '../flag-icon-css/sr.svg' \
            else if (@language = 'Lt-uz-UZ') then '../flag-icon-css/uz.svg' \
            else if (@language = 'lv-LV') then '../flag-icon-css/lv.svg' \
            else if (@language = 'mk-MK') then '../flag-icon-css/mk.svg' \
            else if (@language = 'mn-MN') then '../flag-icon-css/mn.svg' \
            else if (@language = 'mr-IN') then '../flag-icon-css/in.svg' \
            else if (@language = 'ms-BN') then '../flag-icon-css/bn.svg' \
            else if (@language = 'ms-MY') then '../flag-icon-css/my.svg' \
            else if (@language = 'nb-NO') then '../flag-icon-css/no.svg' \
            else if (@language = 'nl-BE') then '../flag-icon-css/be.svg' \
            else if (@language = 'nl-NL') then '../flag-icon-css/nl.svg' \
            else if (@language = 'nn-NO') then '../flag-icon-css/no.svg' \
            else if (@language = 'pa-IN') then '../flag-icon-css/in.svg' \
            else if (@language = 'pl-PL') then '../flag-icon-css/pl.svg' \
            else if (@language = 'pt-BR') then '../flag-icon-css/br.svg' \
            else if (@language = 'pt-PT') then '../flag-icon-css/pt.svg' \
            else if (@language = 'ro-MO') then '../flag-icon-css/mo.svg' \
            else if (@language = 'ro-RO') then '../flag-icon-css/ro.svg' \
            else if (@language = 'ru-MO') then '../flag-icon-css/mo.svg' \
            else if (@language = 'ru-RU') then '../flag-icon-css/ru.svg' \
            else if (@language = 'sa-IN') then '../flag-icon-css/in.svg' \
            else if (@language = 'sk-SK') then '../flag-icon-css/sk.svg' \
            else if (@language = 'sl-SI') then '../flag-icon-css/si.svg' \
            else if (@language = 'sq-AL') then '../flag-icon-css/al.svg' \
            else if (@language = 'sr-RS') then '../flag-icon-css/rs.svg' \
            else if (@language = 'sv-FI') then '../flag-icon-css/fi.svg' \
            else if (@language = 'sv-SE') then '../flag-icon-css/se.svg' \
            else if (@language = 'sw-KE') then '../flag-icon-css/ke.svg' \
            else if (@language = 'syr-SY') then '../flag-icon-css/sy.svg' \
            else if (@language = 'ta-IN') then '../flag-icon-css/in.svg' \
            else if (@language = 'te-IN') then '../flag-icon-css/in.svg' \
            else if (@language = 'th-TH') then '../flag-icon-css/th.svg' \
            else if (@language = 'tr-TR') then '../flag-icon-css/tr.svg' \
            else if (@language = 'tt-RU') then '../flag-icon-css/ru.svg' \
            else if (@language = 'uk-UA') then '../flag-icon-css/ua.svg' \
            else if (@language = 'ur-PK') then '../flag-icon-css/pk.svg' \
            else if (@language = 'vi-VN') then '../flag-icon-css/vn.svg' \
            else if (@language = 'zh-CHS') then '../flag-icon-css/cn.svg' \
            else if (@language = 'zh-CHT') then '../flag-icon-css/cn.svg' \
            else if (@language = 'zh-CN') then '../flag-icon-css/cn.svg' \
            else if (@language = 'zh-HK') then '../flag-icon-css/hk.svg' \
            else if (@language = 'zh-MO') then '../flag-icon-css/mo.svg' \
            else if (@language = 'zh-SG') then '../flag-icon-css/sg.svg' \
            else if (@language = 'zh-TW') then '../flag-icon-css/tw.svg' \
            else '../flag-icon-css/us.svg' \
        "))
        "   "
        oxy_label(
            text, "  ${i18n(term.usage)} ",
            styles, "font-weight: bold;"
        )
        " "
       oxy_popup(
            edit, '@usage',
            values, 'admitted, notRecommended, obsolete, preferred',
            labels, '${i18n(term.usage.admitted)}, ${i18n(term.usage.notRecommended)}, ${i18n(term.usage.obsolete)}, ${i18n(term.usage.preferred)}'
            columns, 20,
            selectionMode, 'single',
            fontInherit, 'false'
        );
    display: block;
    font-size: 10px;
    height: 11px;
}
*[class~="termentry/termNotation"][usage~="preferred"] {
    background-color: rgba(0, 255, 0, 0.2);
}
*[class~="termentry/termNotation"][usage~="admitted"] {
    background-color: rgba(255, 255, 0, 0.2);

}
*[class~="termentry/termNotation"][usage~="notRecommended"] {
    background-color: rgba(255, 0, 0, 0.2);
}

/*********************************************
 * TERM VARIANT
 *********************************************/
*[class~="termentry/termVariant"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.termVariant)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.termSource.add'),
                oxy_action(id, 'term.termContext.add'),
                oxy_action(id, 'term.annotation.add'),
                oxy_action(id, 'term.termVariant.delete')
            )
        );
}
*[class~="termentry/termVariant"] {
    -oxy-placeholder-content: "${i18n(term.termVariant.placeholder)}";
    -oxy-show-placeholder: always;
}
*[class~="termentry/termVariant"][case]:after(2) {
    content: " ";
    font-size: 3pt;
    display: block;
    width: 100%;
}

/*********************************************
 * RELATIONS
 *********************************************/
*[class~="termentry/relations"] {
    -oxy-display-tags: none;
}

/*********************************************
 * RELATIONS LINKLIST
 * 
 * This is the common selector for all 
 * linktypes.
 *********************************************/
*[class~="termentry/relations-linklist"]:before(10) {
    -oxy-display-tags: none;
    background-color: rgba(240, 240, 240, 0.3);
    border-bottom: 0.05rem solid #767676;
    display: block;
    font-size: 10px;
    font-weight: bold;
    margin-bottom: 2px;
    padding-bottom: 3px;
    padding-left: 5px;
}
*[class~="termentry/relations-linklist"] {
    display: block;
    font-family: Arial, sans-serif;
    margin-left: 5px;
    margin-right: 5px;
    margin-bottom: 5px;
    margin-top: 5px;
    width: 99% !important;
    -oxy-display-tags: none;
    -oxy-show-placeholder: always;
    -oxy-editable: true;
    border-width: 0.05rem;
    border-style: solid;
    border-color: #3d3d3d;
    border-radius: 5px;
    -oxy-show-placeholder: no !important;
}


/*********************************************
 * ANTONYMS
 *********************************************/
/* Oxygen Content Fusion does not support keyrefs */
@media oxygen and (platform: 'webapp') {
    *[class~="termentry/antonyms"]:before(10) {
        content:
            oxy_buttonGroup(
                label, '${i18n(term.antonyms)}',
                transparent, 'true',
                fontInherit, 'true',
                actions,
                oxy_action_list(
                    oxy_action(id, 'term.antonym.add.href'),
                    oxy_action(id, 'term.antonyms.delete')
                )
            );
    }
}
/* Oxygen XML standalone does support keyrefs and hrefs */
@media oxygen and (platform: 'standalone') {
    *[class~="termentry/antonyms"]:before(10) {
        content:
            oxy_buttonGroup(
                label, '${i18n(term.antonyms)}',
                transparent, 'true',
                fontInherit, 'true',
                actions,
                oxy_action_list(
                    oxy_action(id, 'term.antonym.add'),
                    oxy_action(id, 'term.antonym.add.href'),
                    oxy_action(id, 'term.antonyms.delete')
                )
            );
    }
}
*[class~="termentry/antonyms"] {
}
/*********************************************
 * ANTONYM
 *********************************************/
*[class~="termentry/antonym"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.antonym)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.antonym.add'),
                oxy_action(id, 'term.antonym.delete')
            )
        );
}

/*********************************************
 * INSTANCES OF
 *********************************************/
*[class~="termentry/instancesOf"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.instancesOf)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.instanceOf.add'),
                oxy_action(id, 'term.instancesOf.delete')
            )
        );
}
*[class~="termentry/instancesOf"] {
}

/*********************************************
 * INSTANCE OF
 *********************************************/
*[class~="termentry/instanceOf"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.instanceOf)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.instanceOf.add'),
                oxy_action(id, 'term.instanceOf.delete')
            )
        );
}

/*********************************************
 * PARTS OF
 *********************************************/
*[class~="termentry/partsOf"]:before(10) {
    content:
    oxy_buttonGroup(
        label, '${i18n(term.partsOf)}',
        transparent, 'true',
        fontInherit, 'true',
        actions,
        oxy_action_list(
            oxy_action(id, 'term.partOf.add'),
            oxy_action(id, 'term.partsOf.delete')
        )
    );
}

/*********************************************
 * PART OF
 *********************************************/
*[class~="termentry/partOf"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.partOf)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.partOf.add'),
                oxy_action(id, 'term.partOf.delete')
            )
        );
}

/*********************************************
 * SUPERORDINATE CONCEPTS
 *********************************************/
*[class~="termentry/superordinateConcepts"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.superordinateConcepts)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.superordinateConcept.add'),
                oxy_action(id, 'term.superordinateConcepts.delete')
            )
        );
}

/*********************************************
 * SUPERORDINATE CONCEPT
 *********************************************/
*[class~="termentry/superordinateConcept"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.superordinateConcept)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.superordinateConcept.add'),
                oxy_action(id, 'term.superordinateConcept.delete')
            )
        );
}

/*********************************************
 * SUBORDINATE CONCEPTS
 *********************************************/
*[class~="termentry/subordinateConcepts"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.subordinateConcepts)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.subordinateConcept.add'),
                oxy_action(id, 'term.subordinateConcepts.delete')
            )
        );
}

/*********************************************
 * SUBORDINATE CONCEPT
 *********************************************/
*[class~="termentry/subordinateConcept"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.subordinateConcept)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.subordinateConcept.add'),
                oxy_action(id, 'term.subordinateConcept.delete')
            )
        );
}

/*********************************************
 * RELATED TERMS
 *********************************************/
*[class~="termentry/relatedTerms"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.relatedTerms)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.relatedTerm.add'),
                oxy_action(id, 'term.relatedTerms.delete')
            )
        );
}

/*********************************************
 * RELATED TERM
 *********************************************/
*[class~="termentry/relatedTerm"]:before(10) {
    content:
        oxy_buttonGroup(
            label, '${i18n(term.relatedTerm)}',
            transparent, 'true',
            fontInherit, 'true',
            actions,
            oxy_action_list(
                oxy_action(id, 'term.relatedTerm.add'),
                oxy_action(id, 'term.relatedTerm.delete')
            )
        );
}

/*********************************************
 * TERM RELATION
 *********************************************/
*[class~="termentry/termRelation"][keyref]:before(7) {
    content:
    oxy_button(
        action, oxy_action(
        name, oxy_getSomeText(oxy_link-text(), 150, true),
        description, 'dddd',
        operation, 'ro.sync.ecss.extensions.commons.operations.JSOperation',
        arg-script, oxy_concat(
            'function doOperation(){ var url = Packages.ro.sync.ecss.dita.DITAAccess.resolveKeyRef(new java.net.URL("',
            oxy_base-uri(),
            '"),"',
            attr(keyref)
            '", false); Packages.ro.sync.exml.workspace.api.PluginWorkspaceProvider.getPluginWorkspace().open(url); }'
        )
    ),
    transparent, true);
    width: 75%;
    display: inline;
    float: right;
    -oxy-display-tags: none;
}

/* Korean */
*[xml|lang~="ko-KR"],
*[language~="ko-KR"] > termVariant {
    font-family: "Noto Sans KR", sans-serif;
    font-weight: 400;
    font-style: normal;
}

/* Chinese (Simplified) */
*[xml|lang~="zh-CN"],
*[language~="zh-CN"] > termVariant {
    font-family: "Noto Sans SC", sans-serif;
    font-weight: 400;
    font-style: normal;
}

/* Chinese (Traditional) */
*[xml|lang~="zh-TW"],
*[language~="zh-TW"] > termVariant {
    font-family: "Noto Sans TC", sans-serif;
    font-weight: 400;
    font-style: normal;
}

/* Japanese */
*[xml|lang~="ja-JP"],
*[language~="ja-JP"] > termVariant {
    font-family: "Noto Sans JP", sans-serif;
    font-weight: 400;
    font-style: normal;
}

/*********************************************
 * ABSTRACT
 *********************************************/
*[class~="topic/abstract"]:before {
    content: "";
}
